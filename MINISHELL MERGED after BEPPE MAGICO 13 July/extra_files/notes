--------------------------------------------FORK()-----------------------------------------------------
The fork function creates a child process that splinters from the parent and executes the code that follows it.
A child and parent process can be restricted via the use of their process id's obtained by using the getpid function, or by reading the return value of the fork function itself.

Child processes will be able to create further child processes by the use of the fork function itself, this can be avoided by limiting their access to that section of code via the use of the process id of the current process witch will be different between parent and child.

--------------------------------------------RETURN_VALUE-----------------------------------------------
Fork returns on success the process id of the child process when inside of the parent or 0 when inside the child process.

-------------------------------------------------------------------------------------------------------

--------------------------------------------WAIT()-----------------------------------------------------
The wait function invoked without operands blocks the execution of the current process until all of it's children have completed execution and have terminated with a zero exit status, if operands are specified they have to be the Process id's of the processes the wait function is supposed to wait for.

--------------------------------------------RETURN_VALUE-----------------------------------------------
The wait function returns -1 if there where no children to wait for, but it will return the process id of the process that it was waiting for the termination of.

We should also check the ERRNO variable to see if the wait function wrote ECHILD onto it when the wait function returns cause it can return a different error from -1 even  when there are no child processes.

-------------------------------------------------------------------------------------------------------
---------------------------------------GETPID(), GETPPID()---------------------------------------------
The functions getpid(), and getppid() return the int value of the process id of the current process and of its parent process respectively.

-------------------------------------------------------------------------------------------------------

------------------------------------------PIPE()-------------------------------------------------------
The pipe function creates a two-ended connection to a file using two Fds or file descriptors that it creates internally writing them to an (int)array of size 2 that has to be declared before the function call and it should look something like, {int	ar[2];}.

The pipe allows for reading and writing data to a file using fd[0] and fd[1] respectively. This allows for memory to be shared between processes without the use of previously allocated memory.

The pipe should always be created before the fork function is called and the child process is created because if it isn't the child process will not inherit the fds created by the pipe.

It is good procedure to use the function close() to close the fd that the process isn't going to use before starting to operate, so in the case of the writing process it should close fd[0] and the reading process should close fd[1].

The other fd should also be closed after it has been used.

--------------------------------------------RETURN_VALUE-----------------------------------------------
The pipe function returns -1 if it wasn't able to create the file descriptors and 0 if it was successful.
